<?php
 class DroneTheme { const THEME_OPTIONS_VERSION_KEY = '__version'; const UPDATE_URL = 'http://themes.kubasto.com/update.php'; const UPDATE_INTERVAL = 72; const UPDATE_INTERVAL_JITTER = 24; const WP_STYLE_FILENAME = 'style.css'; const WP_FUNCTIONS_FILENAME = 'functions.php'; const WP_WIDGETS_FILENAME = 'widgets.php'; const WP_LANGUAGES_DIRECTORY = 'languages'; const WP_FILTER_PRIORITY_DEFAULT = 10; const WP_OPTIONS_URL = 'options.php'; const WP_AJAX_URL = 'admin-ajax.php'; private static $instance = null; private $hooks; private $theme_options_hook_suffix; private $theme_options_array; private $theme_options; private $post_options = array(); private $update = false; private $features; private $styles = array(); private $scripts = array(); private $scripts_jquery = array(); private $drone_dir; private $drone_uri; private $class; private $theme; private $name; private $version; private $template_dir; private $template_uri; protected function onBeforeConstruct() { } protected function onAfterConstruct() { } protected function onLoad() { } protected function onSetupOptions($theme_options) { } protected function onThemeOptionsCompatybility(&$data, $version) { } protected function onSetupTheme() { } protected function onWidgetsInit() { } protected function onThemeOptions($theme_options) { } protected function onPostOptions($post_options, $post_id, $post_type) { } protected function onWidgetsOptions() { } protected function onSavePost($post_id, $post_type) { } private function eventExists($name) { return DroneFunc::classMethodExists($this, $name); } private function getDocComments($filename, $scope = array(T_PRIVATE, T_PROTECTED, T_PUBLIC, T_ABSTRACT)) { if (!file_exists($filename)) { return false; } if (($file = @file_get_contents($filename)) === false) { return false; } $scope = (array)$scope; $tokens = token_get_all($file); $tokens_count = count($tokens); $doccomments = array(); for ($i = 0; $i < $tokens_count; $i++) { if ( isset($tokens[$i+0][0]) && $tokens[$i+0][0] == T_DOC_COMMENT && isset($tokens[$i+1][0]) && $tokens[$i+1][0] == T_WHITESPACE && isset($tokens[$i+2][0]) && in_array($tokens[$i+2][0], $scope) && isset($tokens[$i+3][0]) && $tokens[$i+3][0] == T_WHITESPACE && isset($tokens[$i+4][0]) && $tokens[$i+4][0] == T_FUNCTION && isset($tokens[$i+5][0]) && $tokens[$i+5][0] == T_WHITESPACE && isset($tokens[$i+6][0]) && $tokens[$i+6][0] == T_STRING && isset($tokens[$i+0][1]) && isset($tokens[$i+6][1]) ) { $doccomments[$tokens[$i+6][1]] = $tokens[$i+0][1]; } } return $doccomments; } private function contactFormOutput($result, $message) { echo json_encode(array( $this->features['contact-form']['result_var'] => $result, $this->features['contact-form']['message_var'] => $message) ); exit; } protected function __construct() { DroneWidget::$_theme_instance = $this; $this->onBeforeConstruct(); $this->class = get_class($this); if (function_exists('wp_get_theme')) { $this->theme = wp_get_theme(); } else { $this->theme = (object)array_change_key_case(get_theme_data(TEMPLATEPATH.'/'.self::WP_STYLE_FILENAME)); } $this->name = DroneFunc::stringID($this->class); $this->version = $this->theme->version; $this->template_dir = get_template_directory(); $this->template_uri = get_template_directory_uri(); $this->drone_dir = $this->template_dir.'/'.Drone::DIRECTORY; $this->drone_uri = $this->template_uri.'/'.Drone::DIRECTORY; $this->hooks = array(); if (extension_loaded('eAccelerator')) { $doccomments = $this->getDocComments(TEMPLATEPATH.'/'.self::WP_FUNCTIONS_FILENAME, T_PUBLIC); } $rc = new ReflectionClass($this->class); foreach ($rc->getMethods(ReflectionMethod::IS_PUBLIC) as $method) { if ($method->class != $this->class) { continue; } if (isset($doccomments[$method->name])) { $phpdoc = $doccomments[$method->name]; } else if (($phpdoc = $method->getDocComment()) === false) { continue; } if (!preg_match_all('/@internal (?P<type>action|filter|shortcode):(?P<data>.+)$/im', $phpdoc, $phpdoc_matches, PREG_SET_ORDER)) { continue; } foreach ($phpdoc_matches as $phpdoc_match) { $phpdoc_data = array_map('trim', explode(',', $phpdoc_match['data'])); if (empty($phpdoc_data[0])) { continue; } $hook = new stdClass(); $hook->type = strtolower($phpdoc_match['type']); $hook->tag = $phpdoc_data[0]; $hook->function = array($this, $method->name); if ($hook->type == 'action' || $hook->type == 'filter') { $hook->priority = isset($phpdoc_data[1]) ? (int)$phpdoc_data[1] : self::WP_FILTER_PRIORITY_DEFAULT; $hook->args = isset($phpdoc_data[2]) ? (int)$phpdoc_data[2] : $method->getNumberOfParameters(); } $this->hooks[] = $hook; } } if (file_exists($widgets_filename = TEMPLATEPATH.'/'.self::WP_WIDGETS_FILENAME)) { require $widgets_filename; } $this->theme_options = new DroneThemeOptions($this->name); add_action('init', array($this, 'actionInit')); add_action('after_setup_theme', array($this, 'actionAfterSetupTheme')); $this->onAfterConstruct(); } public function __get($name) { if (in_array($name, array('class', 'theme', 'name', 'version', 'template_dir', 'template_uri'))) { return $this->{$name}; } } public function actionInit() { wp_register_style('theme-options', $this->drone_uri.'/css/theme-options.css', array('thickbox')); wp_register_style('post-options', $this->drone_uri.'/css/post-options.css', array('thickbox')); wp_register_style('widget-options', $this->drone_uri.'/css/widget-options.css'); wp_register_script('jquery-cookie', $this->drone_uri.'/ext/jquery-cookie/jquery.cookie.js', array('jquery')); wp_register_script('jscolor', $this->drone_uri.'/ext/jscolor/jscolor.js'); wp_register_script('update-notice', $this->drone_uri.'/js/update-notice.js', array('jquery', 'jquery-cookie', 'thickbox', 'theme-preview')); wp_register_script('theme-options', $this->drone_uri.'/js/theme-options.js', array('jquery', 'jquery-cookie', 'jscolor', 'media-upload', 'thickbox')); wp_register_script('post-options', $this->drone_uri.'/js/post-options.js', array('jquery', 'jscolor', 'thickbox')); wp_register_script('widget-options', $this->drone_uri.'/js/widget-options.js', array('jquery', 'jscolor')); wp_register_script('contact-form', $this->drone_uri.'/js/contact-form.js', array('jquery')); } public function actionAfterSetupTheme() { load_theme_textdomain($this->name, TEMPLATEPATH.'/'.self::WP_LANGUAGES_DIRECTORY); $this->onLoad(); add_theme_support('automatic-feed-links'); $this->theme_options_array = get_option($this->name); if (isset($this->theme_options_array[self::THEME_OPTIONS_VERSION_KEY])) { $theme_options_version = $this->theme_options_array[self::THEME_OPTIONS_VERSION_KEY]; unset($this->theme_options_array[self::THEME_OPTIONS_VERSION_KEY]); if (version_compare($theme_options_version, $this->version) < 0) { $this->onThemeOptionsCompatybility($this->theme_options_array, $theme_options_version); } } $this->onSetupOptions($this->theme_options); $this->theme_options->fromArray($this->theme_options_array); $this->onSetupTheme(); foreach ($this->hooks as $hook) { switch ($hook->type) { case 'action': case 'filter': add_filter($hook->tag, $hook->function, $hook->priority, $hook->args); break; case 'shortcode': add_shortcode($hook->tag, $hook->function); break; } } add_action('admin_menu', array($this, 'actionAdminMenu')); add_action('add_meta_boxes', array($this, 'actionAddMetaBoxes')); add_action('widgets_init', array($this, 'actionWidgetsInit')); add_action('save_post', array($this, 'actionSavePost')); add_action('wp_head', array($this, 'actionWPHead')); add_action('wp_enqueue_scripts', array($this, 'actionWPEnqueueScripts')); add_filter('body_class', array($this, 'filterBodyClass')); } public function actionAdminMenu() { if (($update = get_transient($this->name.'_update')) === false) { $url = self::UPDATE_URL.'?name='.urlencode($this->name).'&version='.urlencode($this->version); $update = wp_remote_retrieve_body(wp_remote_get($url)); if (!empty($update) && ($update = base64_decode($update)) !== false) { $update = unserialize($update); } else { $update = array(); } $expiration = mt_rand( (self::UPDATE_INTERVAL-self::UPDATE_INTERVAL_JITTER)*3600, (self::UPDATE_INTERVAL+self::UPDATE_INTERVAL_JITTER)*3600 ); set_transient($this->name.'_update', $update, $expiration); } if (isset($update['version']) && isset($update['download_page'])) { if (version_compare($update['version'], $this->version) > 0) { $cookie_name = "wordpress_{$this->name}_update_hidden_version"; if (!isset($_COOKIE[$cookie_name]) || version_compare($update['version'], $_COOKIE[$cookie_name]) > 0) { $this->update = $update; } } } add_action('admin_notices', array($this, 'actionAdminNotices')); add_action('admin_print_styles', array($this, 'actionAdminPrintStyles')); add_action('admin_print_scripts', array($this, 'actionAdminPrintScripts')); $this->theme_options_hook_suffix = add_menu_page( sprintf(__('%s Options', $this->name), $this->theme->name), __('Theme Options'), 'edit_theme_options', $this->name, array($this, 'callbackThemeOptions'), $this->drone_uri.'/img/theme-options.png' ); add_action('admin_print_styles-'.$this->theme_options_hook_suffix, array($this, 'actionAdminPrintStylesThemeOptions')); add_action('admin_print_scripts-'.$this->theme_options_hook_suffix, array($this, 'actionAdminPrintScriptsThemeOptions')); add_action('admin_head-'.$this->theme_options_hook_suffix, array($this, 'actionAdminHeadThemeOptions')); add_action('admin_print_styles-post.php', array($this, 'actionAdminPrintStylesPost')); add_action('admin_print_styles-post-new.php', array($this, 'actionAdminPrintStylesPost')); add_action('admin_print_scripts-post.php', array($this, 'actionAdminPrintScriptsPost')); add_action('admin_print_scripts-post-new.php', array($this, 'actionAdminPrintScriptsPost')); add_action('admin_head-post.php', array($this, 'actionAdminHeadPost')); add_action('admin_head-post-new.php', array($this, 'actionAdminHeadPost')); add_action('admin_print_styles-widgets.php', array($this, 'actionAdminPrintStylesWidgets')); add_action('admin_print_scripts-widgets.php', array($this, 'actionAdminPrintScriptsWidgets')); add_action('admin_head-widgets.php', array($this, 'actionAdminHeadWidgets')); register_setting($this->name, $this->name, array($this, 'callbackThemeOptionsSanitize')); } public function actionAdminNotices() { if ($this->update !== false) { DroneHTML::make('div') ->class('update-nag') ->add( sprintf(__('New version (%s) of <strong>%s</strong> theme is available!', $this->name), $this->update['version'], $this->theme->name), ' ', DroneHTML::make('a') ->class('thickbox thickbox-preview') ->href(rtrim($this->update['download_page'], '/').'/?TB_iframe=true') ->add(__('Update', $this->name)), ' ', __('or', $this->name), ' ', DroneHTML::make('a') ->id('update-notice-hide') ->href('#') ->add(__('hide this message', $this->name)), '.' ) ->ehtml(); } } public function actionAdminPrintStyles() { if ($this->update !== false) { wp_enqueue_style('thickbox'); } } public function actionAdminPrintScripts() { if ($this->update !== false) { wp_enqueue_script('update-notice'); wp_localize_script('update-notice', 'theme', array( 'name' => $this->name, 'updateVersion' => $this->update['version'] )); } } public function actionAdminPrintStylesThemeOptions() { wp_enqueue_style('theme-options'); } public function actionAdminPrintScriptsThemeOptions() { wp_enqueue_script('theme-options'); wp_localize_script('theme-options', 'theme', array( 'name' => $this->name )); } public function actionAdminHeadThemeOptions() { $this->onThemeOptions($this->theme_options); } public function actionAdminPrintStylesPost() { wp_enqueue_style('post-options'); } public function actionAdminPrintScriptsPost() { wp_enqueue_script('post-options'); } public function actionAdminHeadPost() { $post_id = (int)get_the_ID(); $post_options = $this->getPostOptions($post_id); $this->onPostOptions($post_options, $post_id, get_post_type($post_id)); } public function actionAdminPrintStylesWidgets() { wp_enqueue_style('widget-options'); } public function actionAdminPrintScriptsWidgets() { wp_enqueue_script('widget-options'); } public function actionAdminHeadWidgets() { $this->onWidgetsOptions(); } public function actionAddMetaBoxes() { foreach ($this->post_options as $post_type => $post_options) { foreach ($post_options->childs('group') as $group) { add_meta_box( DroneFunc::stringID($group->name), $group->label, array($this, 'callbackPostOptions'), $post_type, $group->context, $group->priority, array('group' => $group) ); } } } public function actionWidgetsInit() { $this->onWidgetsInit(); } public function actionSavePost($post_id) { if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) { return; } if (!current_user_can('edit_post', $post_id)) { return; } $post_type = get_post_type($post_id); if (isset($this->post_options[$post_type])) { $post_options = $this->post_options[$post_type]; foreach ($post_options->childs('group') as $child) { $noncename = DroneFunc::stringID($child->name.'_wpnonce', '_'); if (!isset($_POST[$noncename])) { return; } else if (!wp_verify_nonce($_POST[$noncename], DroneFunc::stringID($child->name))) { return; } } if (isset($_POST[$this->name])) { $post_data = $post_options->sanitize($_POST[$this->name]); update_post_meta($post_id, '_'.$this->name, $post_data); } } $this->onSavePost($post_id, $post_type); } public function actionWPHead() { if (!empty($this->styles)) { echo '<style>'.DroneFunc::minify('css', implode('', $this->styles))."</style>\n"; } if (!empty($this->scripts_jquery)) { $this->scripts[] = 'jQuery(document).ready(function($) { '.implode('', $this->scripts_jquery).' });'; } if (!empty($this->scripts)) { echo '<script>'.DroneFunc::minify('js', implode('', $this->scripts))."</script>\n"; } } public function actionWPEnqueueScripts() { if (!empty($this->scripts_jquery)) { wp_enqueue_script('jquery'); } } public function actionWPHeadOGP() { $ogp['site_name'] = get_bloginfo('name'); $title = trim(wp_title('', false)) or $title = $ogp['site_name']; $ogp['title'] = $title; $ogp['locale'] = str_replace('-', '_', get_bloginfo('language')); if (is_singular() && !is_front_page()) { global $post; $_post = get_post($post->ID); $ogp['url'] = get_permalink($_post->ID); $description = $_post->post_excerpt ? $_post->post_excerpt : do_shortcode($_post->post_content); $description = preg_replace('/<(style|script).*>.*<\/\1>/isU', '', $description); $description = trim(strip_tags(preg_replace('/\s+/', ' ', $description))); $description = DroneFunc::stringCut($description, 250, ' [...]'); $ogp['description'] = $description; if (has_post_thumbnail($_post->ID)) { if (($img = wp_get_attachment_image_src(get_post_thumbnail_id($_post->ID))) !== false) { $ogp['image'] = $img[0]; } } } else { $ogp['url'] = get_bloginfo('url'); $ogp['description'] = get_bloginfo('description'); } $html = DroneHTML::make(); foreach ($ogp as $property => $content) { if ($content) { $html->addNew('meta')->property('og:'.$property)->content(esc_attr($content)); } } $html->ehtml(); } public function actionWPHeadFancybox() { if (!isset($this->features['fancybox'])) { return; } $fancybox = $this->features['fancybox']; $options = $this->theme_options->child($fancybox['group']); if ($options->value('enabled')) { wp_enqueue_style('fancybox'); wp_enqueue_script('fancybox'); $title = $options->child('title'); $transition_type = $options->child('transition/type'); $transition_speed = $options->child('transition/speed'); if ($title->value == '') { $fancybox['options']['titleShow'] = false; } else if ($title->value != $title->default) { $fancybox['options']['titlePosition'] = $title->value; } if ($transition_type->value != $transition_type->default) { $fancybox['options']['transitionIn'] = $fancybox['options']['transitionOut'] = $transition_type->value; } if ($transition_speed->value != $transition_speed->default) { $fancybox['options']['speedIn'] = $fancybox['options']['speedOut'] = $transition_speed->value; } $script = "\$('".rtrim($fancybox['selector'].','.$options->value('selector'), ',')."')"; if (!empty($fancybox['filter'])) { $script .= ".filter(function () { return /\\.({$fancybox['filter']})/i.test(\$(this).attr('href')); })"; } if (!empty($fancybox['parent'])) { $script .= ".attr('rel', function() { var p = \$(this).parents('{$fancybox['parent']}'); return p.length > 0 ? 'fb-'+p.attr('id') : null; })"; } $script .= ".attr('title', function() { var i = \$('img:first', this); return i.attr('title') || i.attr('alt'); })"; $script .= '.fancybox('.json_encode($fancybox['options']).');'; $this->addDocumentJQueryScript($script); } } public function actionWPAjaxContactForm() { if (!isset($this->features['contact-form'])) { exit; } $options = $this->theme_options->child($this->features['contact-form']['group']); $values = array(); foreach ($options->value('fields') as $field) { $value = isset($_POST[$field]) ? trim(strip_tags($_POST[$field])) : ''; switch ($field) { case 'name': if (empty($value)) { $this->contactFormOutput(false, __('Please enter your name.', $this->name)); } break; case 'email': if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)+$/i', $value)) { $this->contactFormOutput(false, __('Invalid email address.', $this->name)); } break; case 'website': if (!empty($value) && !preg_match('|^(https?://)?(www\.)?([-_a-z0-9]+\.)+[-_a-z0-9]+$|i', $value)) { $this->contactFormOutput(false, __('Invalid website address.', $this->name)); } break; case 'phone': if (!empty($value) && !preg_match('/^[-_#\+\*\(\)0-9 ]+$/', $value)) { $this->contactFormOutput(false, __('Invalid phone number.', $this->name)); } break; case 'message': if (strlen($value) < 3) { $this->contactFormOutput(false, __('Please write your message.', $this->name)); } break; } $values[$field] = $value; } $to = $options->value('to'); switch ($options->value('from')) { case 'to': $from = $to; break; case 'field': $from = $values['email']; break; default: $from = get_option('admin_email'); } $reply_to = $values['email']; $author = isset($values['name']) ? $values['name'] : ''; $subject = $options->value('subject'); $subject = str_replace(array('%blogname%', '%blogurl%'), array(get_bloginfo('name'), get_bloginfo('wpurl')), $subject); $subject = preg_replace('/%([a-z]+)%/ie', 'isset($values["\1"]) ? $values["\1"] : ""', $subject); $subject = wp_specialchars_decode(trim(str_replace(array("\r", "\n"), ' ', $subject))); $message = "{$values['message']}\r\n\r\n---\r\n". implode("\r\n", array_intersect_key( $values, array_flip(array_intersect($options->value('fields'), array('name', 'email', 'website', 'phone'))) )); $result = @wp_mail( $to, $subject, $message, ($options->child('settings')->value('from_header') ? "From: \"{$author}\" <{$from}>\r\n" : ''). "Reply-to: {$reply_to}\r\n". "Content-type: text/plain; charset=\"".get_bloginfo('charset')."\"\r\n" ); if ($result) { $this->contactFormOutput(true, __('Message sent.', $this->name)); } else { $this->contactFormOutput(false, __("Error occured. Message couldn't be sent.", $this->name)); } exit; } public function filterBodyClass($classes) { return array_merge(array($this->name.'-'.str_replace('.', '-', $this->version)), $classes); } public function filterNavMenuCurrentItem($items) { return preg_replace('/([ "\'])(current(-menu-item|-cat|_page_item))([ "\'])/i', '\1current \2\4', $items, 1); } public function filterImgCaptionShortcode($depricated, $atts, $content = null) { extract(shortcode_atts(array( 'id' => '', 'align' => 'alignnone', 'width' => '', 'caption' => '' ), $atts)); if ((integer)$width < 1 || empty($caption)) { return $content; } $output = DroneHTML::make('div') ->addClass('wp-caption', 'caption', esc_attr($align)) ->style('width: '.((int)$width).'px;') ->add( do_shortcode($content), DroneHTML::make('div')->class('wp-caption-text caption-text')->add($caption) ); if ($id) { $output->id = esc_attr($id); } return $output->html(); } public function callbackThemeOptions() { require $this->drone_dir.'/tpl/theme-options.php'; } public function callbackThemeOptionsSanitize($data) { $data = $this->theme_options->sanitize($data); $data[self::THEME_OPTIONS_VERSION_KEY] = $this->version; return $data; } public function callbackPostOptions($object, $box) { $group = $box['args']['group']; require $this->drone_dir.'/tpl/post-options.php'; } public function shortcodeColumn($atts, $content = null, $code = '') { extract(shortcode_atts(array( 'type' => '', 'width' => '', 'count' => 2, 'colspan' => 1, 'last' => '' ), $atts)); if (!empty($type) && preg_match('|^([0-9]+)/([0-9]+)$|', $type, $matches)) { list(, $colspan, $count) = $matches; } else if (!empty($width) && preg_match('|^([0-9]+)%$|', $width, $matches)) { $colspan = $matches[1]; $count = 100; } $width = (100-($count-1)*2) * ($colspan / $count) + ($colspan-1)*2; $output = DroneHTML::make('div') ->class('column') ->style("float: left; width: {$width}%;") ->add(DroneFunc::wpShortcodeContent($content, 'block')); if (!empty($last)) { $output = DroneHTML::make()->add( $output->addClass('last'), DroneHTML::make('div')->style('clear: both;')->add() ); } else { $output->style .= ' margin-right: 2%;'; } return $output->html(); } public function shortcodeNoformat($atts, $content = null, $code = '') { extract(shortcode_atts(array( 'tag' => 'pre', 'class' => '' ), $atts)); $content = DroneFunc::wpShortcodeContent($content, 'auto', false); if ($tag == 'pre') { $content = preg_replace('#(<br ?/?>|^<p>|</p>$)#i', '', $content); $content = preg_replace('#(</p>\r?\n<p>|</p>\r?\n|\r?\n<p>)#i', "\n\n", $content); } $content = htmlspecialchars($content, defined('ENT_HTML5') ? ENT_COMPAT | ENT_HTML5 : ENT_COMPAT, get_bloginfo('charset'), false); $output = DroneHTML::make($tag)->add($content); if (!empty($class)) { $output->class($class); } return $output->html(); } protected function getPostOptions($post_id_type = 'post') { $post_id = is_int($post_id_type) ? $post_id_type : null; $post_type = is_null($post_id) ? $post_id_type : get_post_type($post_id); if (!isset($this->post_options[$post_type])) { $this->post_options[$post_type] = new DronePostOptions($this->name); } if (!is_null($post_id)) { static $last_post_id = null; if ($post_id !== $last_post_id) { $post_data = get_post_meta($post_id, '_'.$this->name, true); $this->post_options[$post_type]->fromArray($post_data); $last_post_id = $post_id; } } return $this->post_options[$post_type]; } public function addThemeFeature($name, $params = array()) { switch ($name) { case 'query-vars': extract(array_merge(array( 'qvars' => array() ), $params)); if (!empty($qvars)) { add_action('query_vars', create_function('$qvars', 'return array_merge($qvars, '.var_export((array)$qvars, true).');')); } break; case 'ogp': add_action('wp_head', array($this, 'actionWPHeadOGP'), 1); break; case 'nav-menu-current-item': add_filter('wp_nav_menu_items', array($this, 'filterNavMenuCurrentItem')); add_filter('wp_list_pages', array($this, 'filterNavMenuCurrentItem')); add_filter('wp_list_categories', array($this, 'filterNavMenuCurrentItem')); break; case 'img-caption-shortcode-fixed': add_filter('img_caption_shortcode', array($this, 'filterImgCaptionShortcode'), 10, 3); break; case 'widget-twitter': extract(array_merge(array( 'on_tweet' => null, 'on_output' => null ), $params)); DroneWidgetTwitter::$_on_tweet = $on_tweet; DroneWidgetTwitter::$_on_output = $on_output; add_action('widgets_init', create_function('', "register_widget('DroneWidgetTwitter');")); break; case 'widget-flickr': extract(array_merge(array( 'on_photo' => null, 'on_output' => null ), $params)); DroneWidgetFlickr::$_on_photo = $on_photo; DroneWidgetFlickr::$_on_output = $on_output; add_action('widgets_init', create_function('', "register_widget('DroneWidgetFlickr');")); break; case 'widget-unwrapped-text': extract(array_merge(array( 'on_output' => null ), $params)); DroneWidgetUnwrappedText::$_on_output = $on_output; add_action('widgets_init', create_function('', "register_widget('DroneWidgetUnwrappedText');")); break; case 'option-favicon': extract(array_merge(array( 'group' => 'other', 'name' => 'favicon', 'default' => '' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $child ->addOption('image', $name, '', __('Favicon image', $this->name), sprintf(__("Paste favicon's URL or select/upload an image (%s).", $this->name), '<code>png</code>, <code>gif</code>, <code>ico</code>'), array('filter' => 'png|gif|ico'), true) ->importFromArray($this->theme_options_array); $html = '<link rel="icon" type="image/png" href="%s" />'; $func = "if (\$favicon = {$this->class}::getThemeOption('{$group}/{$name}')) { printf('{$html}', \$favicon); }"; if (!empty($default)) { $func .= "else { printf('{$html}', '{$default}'); }"; } add_action('wp_head', create_function('', $func)); } break; case 'option-feed-url': extract(array_merge(array( 'group' => 'other', 'name' => 'feed_url' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $child ->addOption('codeline', $name, '', __('Alternative feed URL', $this->name), __('E.g. FeedBurner.', $this->name), array(), true) ->importFromArray($this->theme_options_array); $func = "\$feed_url = {$this->class}::getThemeOption('{$group}/{$name}');". "return !empty(\$feed_url) && stripos(\$output, 'comments') === false ? \$feed_url : \$output;"; add_filter('feed_link', create_function('$output, $feed', $func), 10, 2); } break; case 'option-tracking-code': extract(array_merge(array( 'group' => 'other', 'name' => 'tracking_code' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $child ->addOption('code', $name, '', __('Tracking code', $this->name), __('E.g. Google Analitycs.', $this->name), array(), true) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "{$this->class}::themeOption('{$group}/{$name}');"), 100); } break; case 'option-custom-css': extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_css' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $child ->addOption('code', $name, '', __('Custom CSS code', $this->name), '', array(), true) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "{$this->class}::getInstance()->addDocumentStyle({$this->class}::getThemeOption('{$group}/{$name}'));"), 1); } break; case 'option-custom-js': extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_js' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $child ->addOption('code', $name, '', __('Custom JavaScript code', $this->name), '', array(), true) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "{$this->class}::getInstance()->addDocumentScript({$this->class}::getThemeOption('{$group}/{$name}'));"), 1); } break; case 'option-contact-form': extract($params = array_merge(array( 'group' => 'contact_form', 'form_id' => '', 'form_class' => 'contact-form', 'result_var' => 'result', 'message_var' => 'message' ), $params)); $child = $this->theme_options->child($group); if ($this->theme_options->isGroup($child)) { $subject_description = '<code>%blogname%</code>&nbsp;-&nbsp;'.__('blog name', $this->name).', '. '<code>%blogurl%</code>&nbsp;-&nbsp;'.__('blog url', $this->name).','. '<code>%name%</code>&nbsp;-&nbsp;'.__('name field', $this->name).', '. '<code>%email%</code>&nbsp;-&nbsp;'.__('e-mail field', $this->name).', '. '<code>%website%</code>&nbsp;-&nbsp;'.__('website field', $this->name).', '. '<code>%phone%</code>&nbsp;-&nbsp;'.__('phone number field', $this->name).', '. '<code>%subject%</code>&nbsp;-&nbsp;'.__('subject field', $this->name).'.'; $child ->addOption('group', 'fields', array('name', 'email', 'subject', 'message'), __('Available form fields', $this->name), '&lowast; '.__('required fields (if present).', $this->name), array('options' => array( 'name' => __('Name', $this->name).'<sup>&lowast;</sup>', 'email' => __('E-mail', $this->name).'<sup>&lowast;</sup>', 'website' => __('Website', $this->name), 'phone' => __('Phone number', $this->name), 'subject' => __('Subject', $this->name), 'message' => __('Message', $this->name).'<sup>&lowast;</sup>' ), 'multiple' => true, 'on_sanitize' => create_function( '$option, $original_value, &$value', '$value = array_values(array_intersect(array_keys($option->options), array_merge($value, array("email", "message"))));' ), 'on_html' => create_function( '$option, &$html', 'foreach ($html->childs() as $child) {'. 'if (is_object($child) && $child->tag == "label") {'. '$input = $child->child(0);'. 'if ($input->value == "email" || $input->value == "message") {'. '$input->checked()->disabled();'. '}'. '}'. '}' )), true) ->importFromArray($this->theme_options_array); $child ->addOption('text', 'subject', '[%blogname%] %subject%', __('E-mail subject', $this->name), $subject_description, array(), true) ->importFromArray($this->theme_options_array); $child ->addOption('codeline', 'to', get_option('admin_email'), __('Recipient e-mail address', $this->name), '', array(), true) ->importFromArray($this->theme_options_array); $child ->addOption('list', 'from', 'admin', __('Sender e-mail address', $this->name), __("Some servers allow only for sending emails from their own domain, so in that case make sure it's the proper email.", $this->name), array('options' => array( 'admin' => sprintf('%s (%s)', __('WordPress settings e-mail', $this->name), get_option('admin_email')), 'to' => __('Recipient e-mail address', $this->name), 'field' => __('E-mail form field', $this->name) )), true) ->importFromArray($this->theme_options_array); $child ->addOption('group', 'settings', array('from_header'), __('Advanced settings', $this->name), '', array('options' => array( 'from_header' => sprintf(__('Override %s header with Name field', $this->name), '<code>From</code>') ), 'multiple' => true), true) ->importFromArray($this->theme_options_array); $this->features['contact-form'] = array_merge($params, array( 'action' => $action = $this->name.'_contact_form' )); add_action("wp_ajax_nopriv_{$action}", array($this, 'actionWPAjaxContactForm')); add_action("wp_ajax_{$action}", array($this, 'actionWPAjaxContactForm')); } break; case 'shortcode-column': add_shortcode('column', array($this, 'shortcodeColumn')); break; case 'shortcode-noformat': add_shortcode('noformat', array($this, 'shortcodeNoformat')); break; } } public function addDocumentStyle($style) { if (empty($style)) { return; } if (is_array($style)) { $this->styles += $style; } else { $this->styles[] = (string)$style; } } public function addDocumentScript($script) { if (empty($script)) { return; } if (is_array($script)) { $this->scripts += $script; } else { $this->scripts[] = (string)$script; } } public function addDocumentJQueryScript($script_jquery) { if (empty($script_jquery)) { return; } if (is_array($script_jquery)) { $this->scripts_jquery += $script_jquery; } else { $this->scripts_jquery[] = (string)$script_jquery; } } public static function getInstance($class_name = __CLASS__) { if (is_null(self::$instance)) { self::$instance = new $class_name(); } return self::$instance; } public static function create($class_name) { return self::getInstance($class_name); } public static function get($prop) { return self::getInstance()->{$prop}; } public static function name() { return self::getInstance()->name; } public static function setThemeOption($name, $value) { return self::getInstance()->theme_options->value($name, $value); } public static function getThemeOption($name, $obj = false) { $theme_options = self::getInstance()->theme_options; return $obj ? $theme_options->child($name) : $theme_options->value($name); } public static function themeOption($name) { $option = self::getThemeOption($name, true); echo $option->value; return !$option->isDefault(); } public static function getNotEmptyThemeOption($name) { foreach (func_num_args() == 1 && is_array($name) ? $name : func_get_args() as $name) { $option = self::getThemeOption($name); if (!empty($option)) { return $option; } } return null; } public static function notEmptyThemeOption($name) { $args = func_get_args(); echo call_user_func_array('DroneTheme::getNotEmptyThemeOption', $args); } public static function getPostOption($name, $obj = false) { global $post; if (isset($post)) { $post_options = self::getInstance()->getPostOptions((int)$post->ID); return $obj ? $post_options->child($name) : $post_options->value($name); } } public static function postOption($name) { $option = self::getPostOption($name, true); echo $option->value; return !$option->isDefault(); } public static function getInheritOption($post_option_name, $theme_option_name) { $option = self::getPostOption($post_option_name, true); if (is_null($option) || $option->isDefault()) { $value = self::getThemeOption($theme_option_name); } else { $value = $option->value; } return $value; } public static function inheritOption($post_option_name, $theme_option_name) { echo self::getInheritOption($post_option_name, $theme_option_name); } public static function getPostMeta($name) { $post_id = get_the_ID(); static $cache = array(); if (isset($cache[$post_id][$name])) { return $cache[$post_id][$name]; } switch ($name) { case 'title': $result = get_the_title(); break; case 'link': $result = get_permalink(); break; case 'link_edit': $result = get_edit_post_link(); break; case 'date_year_link': $result = get_year_link(get_the_date('Y')); break; case 'date_month_link': $result = call_user_func_array('get_month_link', explode(' ', get_the_date('Y n'))); break; case 'date_day_link': $result = call_user_func_array('get_day_link', explode(' ', get_the_date('Y n j'))); break; case 'date': $result = get_the_date(); break; case 'date_modified': $result = get_the_modified_date(); break; case 'time': $result = get_the_time(); break; case 'time_modified': $result = get_the_modified_time(); break; case 'category_list': $result = get_the_category_list(', '); break; case 'tags_list': $result = get_the_tag_list('', ', '); break; case 'comments_link': $result = get_comments_link(); break; case 'comments_count': $result = get_comments_number(); break; case 'comments_number': $result = DroneFunc::functionGetOutputBuffer('comments_number'); break; case 'author_link': global $authordata; $result = get_author_posts_url($authordata->ID, $authordata->user_nicename); break; case 'author_name': $result = get_the_author(); break; default: return ''; } $cache[$post_id][$name] = $result; return $result; } public static function postMeta($name) { echo self::getPostMeta($name); } private static function getPostMetaFormatReplaceCallback($matches) { $s = self::getPostMeta($matches[1]); if (!empty($matches[2])) { $s = esc_attr($s); } return $s; } public static function getPostMetaFormat($format) { $s = preg_replace_callback('/%([_a-z]+?)(_esc)?%/i', 'DroneTheme::getPostMetaFormatReplaceCallback', $format); if (func_num_args() > 1) { $args = func_get_args(); $s = call_user_func_array('sprintf', array_merge(array($s), array_slice($args, 1))); } return $s; } public static function postMetaFormat($format) { $args = func_get_args(); echo call_user_func_array('DroneTheme::getPostMetaFormat', $args); } public static function contactForm($field_callback, $before_callback = null, $after_callback = null, $return = false) { $_this = self::getInstance(); if (!isset($_this->features['contact-form'])) { return; } $options = $_this->theme_options->child($_this->features['contact-form']['group']); $labels = array( 'name' => __('Name', $_this->name), 'email' => __('E-mail', $_this->name), 'website' => __('Website', $_this->name), 'phone' => __('Phone number', $_this->name), 'subject' => __('Subject', $_this->name), 'message' => __('Message', $_this->name) ); $requires = array( 'name' => true, 'email' => true, 'website' => false, 'phone' => false, 'subject' => false, 'message' => true ); $output = DroneHTML::make('form') ->action(admin_url(self::WP_AJAX_URL)) ->method('post') ->add( DroneHTML::makeHidden('action', $_this->features['contact-form']['action']) ); if ($_this->features['contact-form']['form_id']) { $output->id($_this->features['contact-form']['form_id']); } if ($_this->features['contact-form']['form_class']) { $output->class($_this->features['contact-form']['form_class']); } if (!is_null($before_callback)) { $output->add(is_callable($before_callback) ? call_user_func($before_callback) : (string)$before_callback); } if (is_callable($field_callback)) { foreach ($options->value('fields') as $field) { $output->add(call_user_func($field_callback, $field, $requires[$field], $labels[$field])); } } if (!is_null($after_callback)) { $output->add(is_callable($after_callback) ? call_user_func($after_callback) : (string)$after_callback); } if ($return) { return $output->html(); } else { $output->ehtml(); } } }