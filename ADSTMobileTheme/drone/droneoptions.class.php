<?php
 abstract class DroneOptions { const OPTION_CLASS = 'DroneOption'; private $class; protected $name; protected $level; protected $childs = array(); public $label = ''; public $description = ''; protected function getStructName($name) { return empty($this->name) ? $name : "{$this->name}[{$name}]"; } public function __construct($name, $level = 0) { $this->class = get_class($this); $this->name = $name; $this->level = $level; } public function __get($name) { if (in_array($name, array('name', 'level'))) { return $this->{$name}; } } public function isGroup($child) { return is_object($child) && is_a($child, $this->class); } public function addGroup($name, $label = '', $description = '') { $group = new $this->class($this->getStructName($name), $this->level+1); $group->label = $label; $group->description = $description; $this->childs[$name] = $group; return $group; } public function addOption($type, $name, $default, $label = '', $description = '', $properties = array()) { $class_name = self::OPTION_CLASS.ucfirst(strtolower($type)); if (!class_exists($class_name)) { return false; } $option = new $class_name($this->getStructName($name), $default); $option->label = $label; $option->description = $description; foreach ($properties as $prop_name => $prop_value) { $option->{$prop_name} = $prop_value; } $this->childs[$name] = $option; return $option; } public function child($path) { if (is_string($path)) { $path = trim($path, '/'); } if (empty($path)) { return $this; } if (!is_array($path)) { $path = explode('/', $path); } $name = array_shift($path); if (!isset($this->childs[$name])) { return; } $child = $this->childs[$name]; if (empty($path) || !$this->isGroup($child)) { return $child; } else { return $child->child($path); } } public function childs($type = 'all') { if ($type == 'all') { return $this->childs; } else { $op = rtrim($type, 's') == 'group' ? '' : '!'; return array_filter($this->childs, create_function('$child', "return {$op}is_a(\$child, '{$this->class}');")); } } public function deleteChild($path) { if (empty($path)) { return; } $path = is_string($path) ? explode('/', $path) : $path; $name = array_shift($path); if (!isset($this->childs[$name])) { return; } $child = $this->childs[$name]; if (!$this->isGroup($child) || empty($path)) { unset($this->childs[$name]); } else { $child->deleteChild($path); } } public function value($path, $value = null) { $child = $this->child($path); if (!is_null($child) && !$this->isGroup($child)) { if (is_null($value)) { return $child->value; } else { $child->value = $value; } } } public function reset() { foreach ($this->childs as $child) { $child->reset(); } } public function sanitize($values) { $sanitized = array(); if (is_array($values)) { foreach ($this->childs as $name => $child) { if (isset($values[$name]) && (!$this->isGroup($child) || is_array($values[$name]))) { $sanitized[$name] = $child->sanitize($values[$name]); } } } return $sanitized; } public function fromArray(&$haystack) { if (!is_array($haystack)) { $this->reset(); return false; } foreach ($this->childs as $name => $child) { if (!isset($haystack[$name])) { $child->reset(); } else if ($this->isGroup($child)) { $child->fromArray($haystack[$name]); } else { $child->value = $haystack[$name]; } } return true; } public function toArray() { $haystack = array(); foreach ($this->childs as $name => $child) { $haystack[$name] = $this->isGroup($child) ? $child->toArray() : $child->value; } return $haystack; } abstract public function html(); } class DroneThemeOptions extends DroneOptions { public function html() { $output = DroneHTML::make(); foreach ($this->childs as $child) { if ($this->isGroup($child) && $this->level == 0) { $page = DroneHTML::make('div') ->class('page') ->attr('data-label', $child->label) ->add($child->html()); $output->add($page); } else { $option = DroneHTML::make('div')->class('option'); if ($this->isGroup($child)) { $option->addClass('group'); } if (!empty($child->label)) { $option->addNew('label')->add($child->label); } $content = $option->addNew('div')->class('content')->add($child->html()); if (!empty($child->description)) { $content->addNew('p')->class('description')->add($child->description); } $output->add($option); } } return $output; } } class DronePostOptions extends DroneOptions { public $context = 'advanced'; public $priority = 'default'; public function addGroup($name, $label, $description = '', $context = 'advanced', $priority = 'default') { if ($this->level > 0) { return; } $group = parent::addGroup($name, $label, $description); $group->context = $context; $group->priority = $priority; return $group; } public function html() { $output = DroneHTML::make(); foreach ($this->childs as $child) { if (!$this->isGroup($child)) { $option = DroneHTML::make('tr') ->add( DroneHTML::make('td') ->class('label') ->add($child->label), DroneHTML::make('td')->class('option') ->add( DroneHTML::make('div')->class('content')->add($child->html()) ) ); if (!empty($child->description)) { $option->child(1)->addNew('p')->class('description')->add($child->description); } if (empty($child->label)) { $option->delete(0); $option->child(0)->colspan(2); } $output->add($option); } } return $output; } } class DroneWidgetOptions extends DroneOptions { protected $widget; public function __construct($widget) { parent::__construct(''); $this->widget = $widget; } public function addGroup() { return; } public function html() { $output = DroneHTML::make('div')->class('widget-options')->add(); foreach ($this->childs as $name => $child) { if (!$this->isGroup($child)) { $_child = clone $child; $_child->name = $this->widget->get_field_name($name); $option = DroneHTML::make('div') ->class('option') ->add( !empty($child->label) ? DroneHTML::make('label')->add($child->label, ':') : '', DroneHTML::make('div')->class('content')->add($_child->html()) ); if (!empty($child->description)) { $option->addNew('div')->class('description')->add($child->description); } $output->add($option); } } return $output; } } abstract class DroneOption { const CSS_CLASS_PREFIX = 'option'; public $name; public $default; protected $value; public $label = ''; public $description = ''; public $on_sanitize; public $on_html; protected function _set($value) { } abstract protected function _sanitize($value); abstract protected function _html(); public function __construct($name, $default) { $this->name = $name; $this->default = $default; $this->value = $default; } public function __get($name) { return $this->{$name}; } public function __set($name, $value) { if ($name == 'value') { $this->value = $this->sanitize($value); $this->_set($this->value); } } public function cssClassName($classname = null) { if (is_null($classname)) { $classname = get_class($this); } return self::CSS_CLASS_PREFIX.'-'.strtolower(str_replace(__CLASS__, '', $classname)); } public function isDefault() { return $this->value === $this->default; } public function reset() { $this->value = $this->default; $this->_set($this->value); } public function importFromArray(&$haystack) { if (!preg_match('/^[-_a-z0-9]+((\[[-_a-z0-9]+\])+)$/i', $this->name, $matches)) { return false; } $array_def = '$haystack'.str_replace(array('[', ']'), array("['", "']"), $matches[1]); eval("\$value = isset({$array_def}) ? {$array_def} : null;"); $this->value = is_null($value) ? $this->default : $this->sanitize($value); $this->_set($this->value); return true; } public function sanitize($value) { $_value = $this->_sanitize($value); $on_sanitize = $this->on_sanitize; if (is_callable($on_sanitize)) { call_user_func_array($on_sanitize, array($this, $value, &$_value)); } return $_value; } public function html() { $_html = $this->_html(); $on_html = $this->on_html; if (is_callable($on_html)) { call_user_func_array($on_html, array($this, &$_html)); } return $_html; } } class DroneOptionText extends DroneOption { public $maxlength = false; public $required = false; public $trim = true; public $regexpr = ''; protected function _sanitize($value) { $value = (string)$value; if ($this->trim) { $value = trim($value); } if ($this->maxlength && is_int($this->maxlength)) { $value = substr($value, 0, $this->maxlength); } if ($this->regexpr && !preg_match($this->regexpr, $value)) { $value = $this->default; } else if ($this->required && empty($value)) { $value = $this->default; } return $value; } protected function _html() { return DroneHTML::makeInput($this->name, $this->value) ->addClass($this->cssClassName(__CLASS__)) ->title($this->default ? sprintf('%s: %s', __('Default'), $this->default) : null) ->maxlength($this->maxlength); } } class DroneOptionCodeline extends DroneOptionText { protected function _html() { return parent::_html() ->addClass($this->cssClassName(__CLASS__), 'code') ->spellcheck('false'); } } class DroneOptionMemo extends DroneOptionText { protected function _html() { return DroneHTML::makeTextarea($this->name, $this->value) ->addClass($this->cssClassName(__CLASS__)) ->rows(10) ->cols(40); } } class DroneOptionCode extends DroneOptionMemo { protected function _html() { return parent::_html() ->addClass($this->cssClassName(__CLASS__), 'code') ->spellcheck('false'); } } class DroneOptionNumber extends DroneOption { public $min = false; public $max = false; public $float = false; public $unit = ''; protected function _sanitize($value) { if (!is_int($value) && (!$this->float || !is_float($value))) { $value = (string)$value; $value = str_replace(',', '.', $value); $value = preg_replace('/[^-\.0-9]/', '', $value); if (is_numeric($value)) { $value = $this->float ? floatval($value) : intval($value); } else { $value = $this->default; } } if ($this->min !== false) { $value = max($value, $this->min); } if ($this->max !== false) { $value = min($value, $this->max); } return $value; } protected function _html() { $input = DroneHTML::makeInput($this->name, $this->value) ->addClass($this->cssClassName(__CLASS__), 'code') ->title($this->default ? sprintf('%s: %s%s', __('Default'), $this->default, $this->unit) : null); if (!$this->float && is_numeric($this->min) && is_numeric($this->max)) { $input->maxlength = max(strlen($this->min), strlen($this->max)); } return $this->unit ? DroneHTML::make()->add($input, ' ', $this->unit) : $input; } } class DroneOptionBoolean extends DroneOption { public $caption = ''; protected function _sanitize($value) { return (bool)$value; } protected function _html() { return DroneHTML::makeCheckboxSingle($this->name, $this->caption, $this->value) ->addClass($this->cssClassName(__CLASS__)); } } class DroneOptionList extends DroneOption { public $options = array(); public $multiple = false; public $strict = true; protected function _sanitize($value) { if ($this->multiple) { $value = empty($value) ? array() : array_values((array)$value); if ($this->strict) { $value = array_intersect($value, array_keys($this->options)); } } else { if (is_array($value) && isset($value[0])) { $value = $value[0]; } $value = (string)$value; if ($this->strict && !isset($this->options[$value])) { $value = $this->default; } } return $value; } protected function _html() { return DroneHTML::makeSelect($this->name, $this->value, $this->options, $this->multiple) ->addClass($this->cssClassName(__CLASS__)) ->title(!$this->multiple && isset($this->options[$this->default]) ? sprintf('%s: %s', __('Default'), $this->options[$this->default]) : null); } public function values() { $value = (array)$this->value; $values = array(); foreach (array_keys($this->options) as $key) { $values[$key] = in_array($key, $value); } return $values; } public function value($name) { return in_array($name, (array)$this->value); } } class DroneOptionGroup extends DroneOptionList { protected function _html() { if ($this->multiple) { $group = DroneHTML::makeCheckboxGroup($this->name, $this->value, $this->options); } else { $group = DroneHTML::makeRadioGroup($this->name, $this->value, $this->options); } $group->addClass($this->cssClassName(__CLASS__)); return $group; } } class DroneOptionImage extends DroneOptionCodeline { public $filter = 'bmp|jpe?g|png|gif|ico'; protected function _sanitize($value) { $value = parent::_sanitize($value); $filter = is_array($this->filter) ? implode('|', $this->filter) : $this->filter; if (!empty($filter) && !preg_match('/^https?:\/\/.+\.('.$filter.')$/i', $value)) { $value = $this->default; } return $value; } protected function _html() { $input = parent::_html()->maxlength(null)->addClass($this->cssClassName(__CLASS__)); $select = DroneHTML::make('a')->class('button select')->add(__('Select')); $clear = DroneHTML::make('a')->class('button clear')->add(__('Clear')); return DronehTML::make()->add($input, ' ', $select, ' ', $clear); } } class DroneOptionColor extends DroneOption { public $required = true; protected function _sanitize($value) { if ($this->required && empty($value)) { $value = $this->default; } else if (!preg_match('/^#[0-9a-f]{6}$/i', $value)) { $value = $this->default; } return $value; } protected function _html() { $color_class = 'color {required:'.DroneFunc::boolToString($this->required).',hash:true}'; return DroneHTML::makeInput($this->name, $this->value) ->addClass($this->cssClassName(__CLASS__), 'code', $color_class) ->title($this->default ? sprintf('%s: %s', __('Default'), strtoupper($this->default)) : null); } } class DroneOptionBackground extends DroneOption { private $image; private $color; private $repeat; private $position_x; private $position_y; protected function _set($value) { foreach ($value as $name => $value) { $this->{$name}->value = $value; } } protected function _sanitize($value) { $value = (array)$value; $diff = array_diff( array('image', 'color', 'repeat', 'position_x', 'position_y'), array_keys($value) ); if (!empty($diff)) { $value = $this->default; } else { $value = array( 'image' => $this->image->sanitize($value['image']), 'color' => $this->color->sanitize($value['color']), 'repeat' => $this->repeat->sanitize($value['repeat']), 'position_x' => $this->position_x->sanitize($value['position_x']), 'position_y' => $this->position_y->sanitize($value['position_y']) ); } return $value; } protected function _html() { return DroneHTML::make('div') ->class($this->cssClassName(__CLASS__)) ->add( $this->image->html(), '<br />', $this->color->html(), ' ', $this->repeat->html(), ' ', $this->position_x->html(), ' ', $this->position_y->html() ); } public function __construct($name, $default) { $default = array_merge(array( 'image' => '', 'color' => '#ffffff', 'repeat' => 'repeat', 'position_x' => 'left', 'position_y' => 'top' ), (array)$default); parent::__construct($name, $default); $this->image = new DroneOptionImage($name.'[image]', $this->value['image']); $this->color = new DroneOptionColor($name.'[color]', $this->value['color']); $this->repeat = new DroneOptionList($name.'[repeat]', $this->value['repeat']); $this->position_x = new DroneOptionList($name.'[position_x]', $this->value['position_x']); $this->position_y = new DroneOptionList($name.'[position_y]', $this->value['position_y']); $this->repeat->options = array( 'no-repeat' => 'no-repeat', 'repeat' => 'repeat', 'repeat-x' => 'repeat-x', 'repeat-y' => 'repeat-y' ); $this->position_x->options = array( 'left' => 'left', 'center' => 'center', 'right' => 'right' ); $this->position_y->options = array( 'top' => 'top', 'center' => 'center', 'bottom' => 'bottom' ); } public function property($name) { if (in_array($name, array('image', 'color', 'repeat', 'position_x', 'position_y'))) { return $this->{$name}->value; } } public function css() { if (empty($this->value['image'])) { return "background: {$this->value['color']};"; } else { $value = $this->value; $value['image'] = "url({$value['image']})"; return 'background: '.implode(' ', $value).';'; } } }