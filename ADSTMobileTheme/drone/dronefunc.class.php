<?php
 class DroneFunc { const FILELIST_DIR = -1; const TWITTER_API_URL = 'http://api.twitter.com/1/%s.%s'; const FLICKR_API_URL = 'http://api.flickr.com/services/rest/'; public static function boolToString($bool) { return $bool ? 'true' : 'false'; } public static function intRange($val, $min = null, $max = null) { $val = intval($val); if (!is_null($min)) $val = max($val, $min); if (!is_null($max)) $val = min($val, $max); return $val; } function stringMBSubstrReplace($str, $replacement, $start, $length) { return mb_substr($str, 0, $start).$replacement.mb_substr($str, $start+$length); } public static function stringCut($s, $maxlen, $end = '...', $endlen = null) { if (is_null($endlen)) { $endlen = strlen($end); } return strlen($s) > $maxlen ? rtrim(mb_substr($s, 0, $maxlen-$endlen)).$end : $s; } public static function stringID($s, $separator = '-') { $s = strtolower($s); $s = preg_replace('/[^-_a-z0-9\[\]]/', '', $s); $s = preg_replace('/\[[^\[\]+]\]/', '', $s); if (strpos($s, '[]') !== false) { static $arrays = array(); $arrays[$s] = isset($arrays[$s]) ? $arrays[$s]+1 : 0; $s = str_replace('[]', '-'.$arrays[$s], $s); } $s = str_replace(array('-', '_', '[', ']'), array($separator, $separator, $separator, ''), $s); return $s; } public static function stringToHTML($s, $surrounding_paragraph = true) { $s = str_replace("\r", '', $s); $s = preg_replace('/\n{3,}/', "\n\n", $s); $s = str_replace(array("\n\n", "\n"), array('</p><p>', '<br />'), $s); return $surrounding_paragraph ? sprintf('<p>%s</p>', $s) : $s; } public static function stringCamelCase($s) { return preg_replace('/_([a-z])/e', 'strtoupper("\1")', $s); } public static function arrayContent($haystack) { return array_filter($haystack, create_function('$v', 'return !empty($v);')); } public static function arrayImplodeEx($glue, $container, $pieces) { foreach ($pieces as &$value) { $value = $container.$value.$container; } unset($value); return implode($glue, $pieces); } public static function arrayMapRecursive($callback, $haystack) { if (is_array($haystack)) { foreach ($haystack as &$value) { $value = self::arrayMapRecursive($callback, $value); } unset($value); } else { $haystack = call_user_func($callback, $haystack); } return $haystack; } public static function arrayKeysToCamelCase($haystack) { $_haystack = array(); foreach ($haystack as $key => $val) { $_haystack[self::stringCamelCase($key)] = $val; } return $_haystack; } public static function arraySerialize($haystack, $format = 'url') { if (empty($haystack)) { return ''; } switch ($format) { case 'url': $func = create_function('&$val, $key', '$val = $key."=".urlencode($val);'); $glue = '&'; break; case 'html': $func = create_function('&$val, $key', '$val = $key."=\"".htmlspecialchars($val)."\"";'); $glue = ' '; break; default: $func = create_function('&$val, $key', '$val = $key."=".$val;'); $glue = "\n"; } array_walk($haystack, $func); return implode($glue, $haystack); } public static function filesList($directory, $filter = '', $callback = null) { $directory = rtrim($directory, '/\\'); $files = array(); if (is_dir($directory)) { foreach (scandir($directory) as $filename) { if ($filename == '.' || $filename == '..') continue; if (!empty($filter)) { if ($filter === self::FILELIST_DIR) { if (!is_dir($directory.'/'.$filename)) continue; } else { if (is_array($filter)) { $filter = implode('|', $filter); } if (!preg_match('/^.+\.('.$filter.')$/i', $filename)) continue; } } $files[$filename] = !is_null($callback) && is_callable($callback) ? $callback($filename) : $filename; } } return $files; } public static function objectSetVars($object, $vars) { foreach ($vars as $key => $value) { $object->{$key} = $value; } return $object; } public static function classMethodExists($class, $method_name) { $rm = new ReflectionMethod($class, $method_name); return current($rm->getDeclaringClass()) == get_class($class); } public static function functionGetOutputBuffer($function) { $args = func_get_args(); ob_start(); call_user_func_array($function, array_slice($args, 1)); return ob_get_clean(); } public static function functionSwitch($haystack, $needle = true, $strict = false) { foreach ($haystack as $func => $value) { foreach (explode(',', $func) as $func) { if (!preg_match('/^([-_a-z0-9]+)(\[([^,\[\]]*)\])?$/i', $func, $matches)) { continue; } $name = $matches[1]; $params = isset($matches[3]) && $matches[3] ? explode(' ', $matches[3]) : array(); if (!function_exists($name)) { continue; } $result = call_user_func_array($name, $params); if ( (($strict === false) && $result == $needle) || (($strict === true) && $result === $needle) ) { return $value; } } } } public static function minify($type, $source) { if (!in_array($type, array('css', 'html', 'js'))) { return $source; } require_once TEMPLATEPATH.'/'.Drone::DIRECTORY."/ext/minify/{$type}.php"; switch ($type) { case 'css': return str_replace("\n", ' ', Minify_CSS_Compressor::process($source)); case 'html': return Minify_HTML::minify($source); case 'js': return JSMin::minify($source); default: return $source; } } public static function twitterRequest($resource, $params = array()) { $url = sprintf(self::TWITTER_API_URL, $resource, 'json'); if (!empty($params)) { $url .= '?'.self::arraySerialize($params, 'url'); } $body = wp_remote_retrieve_body(wp_remote_get($url)); if (empty($body)) { return false; } if (($response = json_decode($body)) === null) { return false; } if (isset($response->error)) { return false; } return $response; } public static function twitterGetTweets($username, $include_retweets = true, $count = 20) { $params = array( 'screen_name' => $username, 'include_rts' => self::boolToString($include_retweets), 'include_entities' => true, 'count' => $include_retweets ? min($count, 20) : 20, 'trim_user' => 'false' ); if (($response = self::twitterRequest('statuses/user_timeline', $params)) === false) { return false; } $tweets = array(); foreach ($response as $data) { $entities = array(); foreach ($data->entities->hashtags as $hashtag) { $entities[$hashtag->indices[0]] = array( 'type' => 'hashtag', 'length' => $hashtag->indices[1]-$hashtag->indices[0], 'text' => $hashtag->text ); } foreach ($data->entities->user_mentions as $user_mention) { $entities[$user_mention->indices[0]] = array( 'type' => 'user_mention', 'length' => $user_mention->indices[1]-$user_mention->indices[0], 'screen_name' => $user_mention->screen_name ); } foreach ($data->entities->urls as $url) { $entities[$url->indices[0]] = array( 'type' => 'url', 'length' => $url->indices[1]-$url->indices[0], 'url' => $url->url, 'expanded_url' => $url->expanded_url, 'display_url' => $url->display_url ); } krsort($entities); $html = $text = (string)$data->text; foreach ($entities as $pos => $entity) { $len = $entity['length']; switch ($entity['type']) { case 'hashtag': $html = self::stringMBSubstrReplace( $html, sprintf('<a href="http://twitter.com/#!/search?q=%%23%s" title="#%s">#%s</a>', $entity['text'], $entity['text'], $entity['text']), $pos, $len ); break; case 'user_mention': $html = self::stringMBSubstrReplace( $html, sprintf('<a href="http://twitter.com/#!/%s">@%s</a>', $entity['screen_name'], $entity['screen_name']), $pos, $len ); break; case 'url': $html = self::stringMBSubstrReplace( $html, sprintf('<a href="%s" title="%s">%s</a>', $entity['url'], $entity['expanded_url'], $entity['display_url']), $pos, $len ); break; } } $tweets[] = array( 'id' => $data->id_str, 'date' => strtotime($data->created_at), 'url' => sprintf('http://twitter.com/%s/status/%s', $data->user->screen_name, $data->id_str), 'text' => $text, 'html' => $html ); if (count($tweets) >= $count) { break; } } return $tweets; } public static function flickrRequest($api_key, $method, $params = array()) { $params += array( 'api_key' => $api_key, 'method' => $method, 'format' => 'php_serial' ); $url = self::FLICKR_API_URL.'?'.self::arraySerialize($params, 'url'); $body = wp_remote_retrieve_body(wp_remote_get($url)); if (empty($body)) { return false; } if (($response = @unserialize($body)) === false) { return false; } if ($response['stat'] != 'ok') { return false; } return $response; } public static function flickrGetUserdata($api_key, $username) { if (($response[0] = self::flickrRequest($api_key, 'flickr.people.findByUsername', array('username' => $username))) === false) { return false; } if (($response[1] = self::flickrRequest($api_key, 'flickr.urls.getUserPhotos', array('user_id' => $response[0]['user']['nsid']))) === false) { return false; } $userdata = array( 'id' => $response[0]['user']['nsid'], 'username' => $response[0]['user']['username']['_content'], 'url' => $response[1]['user']['url'] ); return $userdata; } public static function flickrGetPhotos($api_key, $user_id, $count = 100) { $params = array( 'user_id' => $user_id, 'per_page' => $count ); if (($response = self::flickrRequest($api_key, 'flickr.people.getPublicPhotos', $params)) === false) { return false; } $photos = array(); foreach ($response['photos']['photo'] as $data) { $photos[] = array( 'title' => $data['title'], 'src' => sprintf('http://farm%s.staticflickr.com/%s/%s_%s_%%s.jpg', $data['farm'], $data['server'], $data['id'], $data['secret']), 'url' => sprintf('http://www.flickr.com/photos/%s/%s', $data['owner'], $data['id']) ); } return $photos; } public static function wpPostsList($args, $key = 'ID', $value = 'post_title') { $posts = array(); foreach (get_posts($args) as $post) { $posts[$post->{$key}] = $post->{$value}; } return $posts; } public static function wpTermsList($taxonomies, $args = array(), $key = 'term_id', $value = 'name') { $terms = array(); foreach (get_terms($taxonomies, $args) as $term) { $terms[$term->{$key}] = $term->{$value}; } return $terms; } public static function wpRelativeImageSrc($src) { if (is_multisite()) { global $current_blog; if ($current_blog->blog_id > 0) { $src_parts = explode('/files/', $src); if (isset($src_parts[1])) { $src = "wp-content/blogs.dir/{$current_blog->blog_id}/files/{$src_parts[1]}"; } } } else { $src_parts = explode('/wp-content/', $src); if (isset($src_parts[1])) { $src = "wp-content/{$src_parts[1]}"; } } return $src; } public static function wpContitionTagSwitch($haystack) { $_haystack = array(); foreach ($haystack as $key => $value) { $_haystack['is_'.str_replace(',', ',is_', $key)] = $value; } return self::functionSwitch($_haystack, true, true); } public static function wpShortcodeContent($content, $type = 'auto', $do_shortcode = true) { if ($do_shortcode) { $content = do_shortcode($content); } $_content = preg_replace('/^(<br>|<br \/>|<\/p>)*(.*?)(<br>|<br \/>|<p>)*$/is', '\2', $content); $inline = $content == $_content; $content = trim($_content); if ($type == 'inline' || ($type == 'auto' && $inline)) { $content = preg_replace('/(<p.*?>|<\/p>)/i', '', $content); } else { $content = preg_replace('/^(<p>)?(.*?)(<\/p>)?$/is', '<p>\2</p>', $content); } $block_tags = '(h[1-6]|ul|ol|div|pre|blockquote|table|section|article|figure)'; $content = preg_replace('/(<p>)?(<\/?'.$block_tags.'.*?>)(<\/p>)?/i', '\2', $content); $content = preg_replace('/(<p>)?(<hr( \/)?>)(<\/p>)?/i', '\2', $content); return trim($content); } public static function wpUpdatePostMeta($post_id, $data, $return_on_false = false) { if (!is_array($data)) { return false; } $result = true; foreach ($data as $key => $value) { $result = $result && update_post_meta($post_id, '_'.$key, $value); if ($return_on_false && !$result) { return false; } } return $result; } public static function wpGetRemoteContent($url, $method = 'get', $data = array()) { $args = array('method' => strtoupper($method)); if (strtolower($method) == 'post' && !empty($data)) { $args['body'] = (array)$data; } return wp_remote_retrieve_body(wp_remote_request($url, $args)); } }