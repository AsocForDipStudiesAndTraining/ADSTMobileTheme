<?php
 class DroneWidget extends WP_Widget { const WIDGET_LABEL_SEPARATOR = '|'; public static $_theme_instance; public static $_on_setup_options; public static $_on_output; private $_widget_options; private $_theme_name; private $_name; protected function onSetupOptions($widget_options) { } protected function htmlOutput($args, $title, $body) { if (!empty($title)) { $title = $args['before_title'].$title.$args['after_title']; } $html = DroneHTML::make()->add($args['before_widget'], $title, $body, $args['after_widget']); $on_output = self::$_on_output; if (is_callable($on_output)) { call_user_func_array($on_output, array($this, $args, $title, $body, &$html)); } $html->ehtml(); } public function __construct($label, $description = '', $class = '', $width = null) { $this->_theme_name = self::$_theme_instance->name; $this->_name = DroneFunc::stringID( str_replace(array(__CLASS__, self::$_theme_instance->class.'Widget', self::$_theme_instance->class), '', get_class($this)) ); parent::__construct( $this->_theme_name.'-'.$this->_name, self::$_theme_instance->theme->name.' '.self::WIDGET_LABEL_SEPARATOR.' '.$label, array('description' => $description, 'classname' => empty($class) ? 'widget-'.$this->_name : $class), array('width' => $width) ); $this->_widget_options = new DroneWidgetOptions($this); $this->onSetupOptions($this->_widget_options); $on_setup_options = self::$_on_setup_options; if (is_callable($on_setup_options)) { call_user_func($on_setup_options, $this, $this->_widget_options); } } public function __get($name) { if (in_array($name, array('_theme_name', '_name'))) { return $this->{$name}; } } public function getTransientName() { return $this->_theme_name.'_'.$this->_name.'_'.$this->number; } public function setWidgetOption($name, $value) { return $this->_widget_options->value($name, $value); } public function getWidgetOption($name, $obj = false) { return $obj ? $this->_widget_options->child($name) : $this->_widget_options->value($name); } public function widgetOption($name) { echo $this->getWidgetOption($name); } public function widget($args, $instance) { $this->_widget_options->fromArray($instance); } public function update($new_instance, $old_instance) { return $this->_widget_options->sanitize($new_instance); } public function form($instance) { $this->_widget_options->fromArray($instance); $this->_widget_options->html()->ehtml(); } } class DroneWidgetTwitter extends DroneWidget { public static $_on_tweet; public function usernameOnSanitize($option, $original_value, &$value) { if (preg_match('|^((https?://)?(www\.)?twitter\.com/(#!/)?)?(.+?)/?$|i', $value, $matches)) { $value = $matches[5]; } } protected function onSetupOptions($widget_options) { $widget_options->addOption('text', 'title', '', __('Title', $this->_theme_name)); $widget_options->addOption('codeline', 'username', '', __('Username', $this->_theme_name), '', array('on_sanitize' => array($this, 'usernameOnSanitize'))); $widget_options->addOption('number', 'count', 5, __('Tweets count', $this->_theme_name), '', array('min' => 1, 'max' => 20)); $widget_options->addOption('number', 'interval', 10, __('Update interval', $this->_theme_name), __('Tweets receiving interval (in minutes).', $this->_theme_name), array('min' => 1)); $widget_options->addOption('boolean', 'include_retweets', true, '', '', array('caption' => __('Include retweets', $this->_theme_name))); } public function __construct() { parent::__construct(__('Twitter', self::$_theme_instance->name), __('Twitter stream.', self::$_theme_instance->name)); } public function update($new_instance, $old_instance) { delete_transient($this->getTransientName()); return parent::update($new_instance, $old_instance); } public function widget($args, $instance) { parent::widget($args, $instance); if (empty($instance['username'])) { return; } $transient = $this->getTransientName(); if (($tweets = get_transient($transient)) === false) { $tweets = DroneFunc::twitterGetTweets( $this->getWidgetOption('username'), $this->getWidgetOption('include_retweets'), $this->getWidgetOption('count') ); if ($tweets === false) { return; } set_transient($transient, $tweets, $this->getWidgetOption('interval')*60); } $html = DroneHTML::make('ul')->add(); foreach ($tweets as $tweet) { $_html = DroneHTML::make('li')->add( $tweet['html'], DroneHTML::make('br'), DroneHTML::make('small')->add( DroneHTML::make('a') ->href($tweet['url']) ->add(sprintf(__('%s ago', $this->_theme_name), human_time_diff($tweet['date']))) ) ); $on_tweet = self::$_on_tweet; if (is_callable($on_tweet)) { call_user_func_array($on_tweet, array($this, $tweet, &$_html)); } $html->add($_html); } $this->htmlOutput($args, $this->getWidgetOption('title'), $html); } } class DroneWidgetFlickr extends DroneWidget { const API_KEY = 'c27f067622def4f043a80cd7d9273033'; public static $_on_photo; protected function onSetupOptions($widget_options) { $widget_options->addOption('text', 'title', '', __('Title', $this->_theme_name)); $widget_options->addOption('codeline', 'username', '', __('Username', $this->_theme_name), __('Screen name from Flickr account settings.', $this->_theme_name)); $widget_options->addOption('number', 'count', 4, __('Photos count', $this->_theme_name), '', array('min' => 1, 'max' => 50)); $widget_options->addOption('number', 'interval', 10, __('Update interval', $this->_theme_name), __('Photos receiving interval (in minutes).', $this->_theme_name), array('min' => 1)); $widget_options->addOption('list', 'url', 'image', 'Action after clickng on a photo', '', array('options' => array( 'flickr' => __('Open Flickr page with the photo', $this->_theme_name), 'image' => __('Open bigger version of the photo', $this->_theme_name) ))); $widget_options->addOption('codeline', 'api_key', '', __('API Key', $this->_theme_name), __('Optional (use only if you want to use your key).', $this->_theme_name)); } public function __construct() { parent::__construct(__('Flickr', self::$_theme_instance->name), __('Flickr photo stream.', self::$_theme_instance->name)); } public function update($new_instance, $old_instance) { delete_transient($this->getTransientName()); return parent::update($new_instance, $old_instance); } public function widget($args, $instance) { parent::widget($args, $instance); if (empty($instance['username'])) { return; } $transient = $this->getTransientName(); if (($data = get_transient($transient)) === false) { $api_key = $this->getWidgetOption('api_key'); if (empty($api_key)) { $api_key = self::API_KEY; } if (($data['userdata'] = DroneFunc::flickrGetUserdata($api_key, $this->getWidgetOption('username'))) === false) { return; } if (($data['photos'] = DroneFunc::flickrGetPhotos($api_key, $data['userdata']['id'], $this->getWidgetOption('count'))) === false) { return; } set_transient($transient, $data, $this->getWidgetOption('interval')*60); } $html = DroneHTML::make('ul')->add(); foreach ($data['photos'] as $photo) { $_html = DroneHTML::make('li'); $_html->addNew('a') ->href($this->getWidgetOption('url') == 'flickr' ? $photo['url'] : sprintf($photo['src'], 'b')) ->title($photo['title']) ->addNew('img') ->src(sprintf($photo['src'], 's')) ->alt($photo['title']) ->width(75) ->height(75); $on_photo = self::$_on_photo; if (is_callable($on_photo)) { call_user_func_array($on_photo, array($this, $photo, &$_html)); } $html->add($_html); } $this->htmlOutput($args, $this->getWidgetOption('title'), $html); } } class DroneWidgetUnwrappedText extends DroneWidget { protected function onSetupOptions($widget_options) { $widget_options->addOption('text', 'title', '', __('Title', $this->_theme_name)); $widget_options->addOption('code', 'text', '', __('Text', $this->_theme_name), '', array('on_html' => create_function( '$option, &$html', '$html->style("height: 25em;");' ))); $widget_options->addOption('boolean', 'shortcodes', false, '', '', array('caption' => __('Allow shortcodes', $this->_theme_name))); } public function __construct() { parent::__construct(__('Unwrapped Text', self::$_theme_instance->name), __('For pure HTML code.', self::$_theme_instance->name), 'widget-unwrapped-text', 600); } public function widget($args, $instance) { parent::widget($args, $instance); $text = $this->getWidgetOption('text'); if ($this->getWidgetOption('shortcodes')) { $text = do_shortcode($text); } $this->htmlOutput($args, $this->getWidgetOption('title'), $text); } }